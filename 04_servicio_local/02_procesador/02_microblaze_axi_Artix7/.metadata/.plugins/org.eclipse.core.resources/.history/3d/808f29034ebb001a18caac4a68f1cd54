#include <stdio.h>
#include "platform.h"
#include "xparameters.h"// Information about AXI peripherals
#include "xgpio.h"      // AXI GPIO driver
#include "xil_printf.h"
#include "xuartlite.h"  // Data over AXI UART

#define SIZE 13

#define delay_time 10000000

XGpio AXI_GPIO0;        // Structure to handle the AXI GPIO 0
XUartLite AXI_UartLite0; // Structure to handle the AXI UART 0
XUartLite AXI_UartLite1; // Structure to handle the AXI UART 1

// Delay function
//-----------------------------
void delay(int time){
  int i;

  for (i = 0; i < time; i++); };


int main()
{
	u32 sws;
	int StatusUart0,StatusUart1;
	int flag = 0;
	u8   input_serial[8] = "";
	u8   plants[8] = "1234if";
	u8   init[6] = ".txt=\"";
	u8   end[2] = "\"";
	u8   output_serial[13]= "";
	int aux = 0;

//*******************************************************************************************************
//*******************************************************************************************************
    XGpio_Initialize(&AXI_GPIO0, 0);   // Initialize AXI GPIO 0
    init_platform();
	// UartLite0 initialization
	StatusUart0 = XUartLite_Initialize(&AXI_UartLite0, XPAR_AXI_UARTLITE_0_DEVICE_ID); // JB
	if (StatusUart0 != XST_SUCCESS){
		print("UartLite INIT FAILED\n\r");
        return XST_FAILURE; }

	// UartLite1 initialization
	StatusUart1 = XUartLite_Initialize(&AXI_UartLite1, XPAR_AXI_UARTLITE_1_DEVICE_ID); // JA
	if (StatusUart1 != XST_SUCCESS){
		print("UartLite INIT FAILED\n\r");
        return XST_FAILURE; }
    // set AXI GPIO 0 channel (1, 2) tristates to Output (0) or inputs (1)
    XGpio_SetDataDirection(&AXI_GPIO0, 1, 0x00000000); // leds
    XGpio_SetDataDirection(&AXI_GPIO0, 2, 0x0000000F); // sws
//*******************************************************************************************************
//*******************************************************************************************************

    while(1){


    	XUartLite_Recv(&AXI_UartLite0, input_serial, 8); //JB

    	int i = 0;
    	int j = 0;
    	int k = 0;
    	for (i = 0; i < SIZE; i++) {

    		if (input_serial[i] == plants[4]) { //Inicio
    			for(j = 0; j < 6; j++){
    				output_serial[i+j] = init[j];

    			}
    		}else{
    			output_serial[i+j] = input_serial[i];

    		}
   /* 		if (input_serial[i] == plants[5]) { // Fin
    			for(k = 0; k < 2; k++){
    				output_serial[i+k] = end[k];

    			}
    		}*/

    	}
        printf("Hola")
    	usleep(2000000); // 100mse
    //	XUartLite_Send(&AXI_UartLite1, input_serial, 13); // Funciona !! 12/06/20 JA
		XUartLite_Send(&AXI_UartLite1, output_serial, 13); // Funciona !! 12/06/20 JA
		XUartLite_Send(&AXI_UartLite1, "\xFF\xFF\xFF", 8);
		usleep(2000000); // 100mse











/*

    	//----- AXI GPIO ----
    	sws = XGpio_DiscreteRead(&AXI_GPIO0, 2);
    	if(sws == 1 && flag !=1)
    	{
    		XUartLite_Send(&AXI_UartLite1, "t1.txt=\"11.1\"", 13); // Funciona !! 12/06/20
    		XUartLite_Send(&AXI_UartLite1, "\xFF\xFF\xFF", 8);
			usleep(2000000); // 100mse
			flag = 1;
    	}
    	if(sws == 2 && flag !=2)
    	{
    		XUartLite_Send(&AXI_UartLite1, "h1.txt=\"3248\"", 13); // Funciona !! 12/06/20
    		XUartLite_Send(&AXI_UartLite1, "\xFF\xFF\xFF", 8);
			usleep(2000000); // 100mse
			flag = 2;
    	}
    	if(sws == 3 && flag !=3)
    	{
    		XUartLite_Send(&AXI_UartLite1, "c1.txt=\"33.3\"", 13); // Funciona !! 12/06/20
    		XUartLite_Send(&AXI_UartLite1, "\xFF\xFF\xFF", 8);
			usleep(2000000); // 100mse
			flag = 3;
    	}
    	if(sws == 4 && flag !=4)
    	{
    		XUartLite_Send(&AXI_UartLite1, "l1.txt=\"1111\"", 13); // Funciona !! 12/06/20
    		XUartLite_Send(&AXI_UartLite1, "\xFF\xFF\xFF", 8);
			usleep(2000000); // 100mse
			flag = 4;
    	}
*/
    }

    return 0;
}
